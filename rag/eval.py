import os
from pathlib import Path
from dotenv import load_dotenv
from sentence_transformers import SentenceTransformer, util

# Importer ta fonction chatbot
from chatbot import answer_question  

# --- Charger variables d'environnement ---
ROOT = Path(__file__).resolve().parents[1]
load_dotenv(ROOT / ".env", override=True)

# --- Charger mod√®le de similarit√© ---
model = SentenceTransformer("all-MiniLM-L6-v2")

# --- Jeu de test (10 cas) ---
test_cases = [
    {
        "question": "Quels concerts de musique classique en avril 2025 √† Paris ?",
        "expected": "Concert de l'Ensemble Marani le 6 avril 2025 √† Paris",
    },
    {
        "question": "Y a-t-il un hommage √† Beethoven en 2025 ?",
        "expected": "Hommage √† Beethoven en avril 2025 √† Paris",
    },
    {
        "question": "Quels festivals ont lieu √† Paris en juin 2025 ?",
        "expected": "Festival de la musique en juin 2025 √† Paris",
    },
    {
        "question": "Des √©v√©nements culinaires sont-ils pr√©vus en juin 2025 ?",
        "expected": "Atelier ou festival culinaire en juin 2025 √† Paris",
    },
    {
        "question": "Je cherche une exposition d‚Äôart en mai 2025 √† Paris",
        "expected": "Exposition d'art en mai 2025 √† Paris",
    },
    {
        "question": "Quels √©v√©nements pour les familles en mars 2025 ?",
        "expected": "√âv√©nements famille en mars 2025 √† Paris",
    },
    {
        "question": "Y a-t-il des √©v√©nements gratuits en avril 2025 ?",
        "expected": "√âv√©nements gratuits √† Paris en avril 2025",
    },
    {
        "question": "Un spectacle de th√©√¢tre est-il pr√©vu en f√©vrier 2025 √† Paris ?",
        "expected": "Spectacle de th√©√¢tre en f√©vrier 2025 √† Paris",
    },
    {
        "question": "Quels √©v√©nements sportifs sont programm√©s en 2025 √† Paris ?",
        "expected": "√âv√©nements sportifs en 2025 √† Paris",
    },
    {
        "question": "Un concert jazz est-il pr√©vu en mai 2025 √† Paris ?",
        "expected": "Concert de jazz en mai 2025 √† Paris",
    },
]

# --- √âvaluation ---
scores = []

for case in test_cases:
    q = case["question"]
    expected = case["expected"]

    print(f"\nüîπ Question: {q}")
    predicted, _ = answer_question(q)  # chatbot g√©n√®re la r√©ponse

    # Similarit√©
    emb_expected = model.encode(expected, convert_to_tensor=True)
    emb_predicted = model.encode(predicted, convert_to_tensor=True)
    score = util.cos_sim(emb_expected, emb_predicted).item()

    scores.append(score)

    print(f"‚úÖ Expected: {expected}")
    print(f"ü§ñ Predicted: {predicted}")
    print(f"üìä Similarit√©: {score:.3f}")

# --- R√©sum√© ---
avg_score = sum(scores) / len(scores)
print("\n=== R√©sultats globaux ===")
print(f"Score moyen de similarit√©: {avg_score:.3f}")
